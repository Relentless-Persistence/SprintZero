> elementRegistry
whenever a epic, feature, or story is rendered in react, find the DOM node and
save it in elementRegistry

> calculateBoundaries()
go through all elements in registry and measure their layout
outputs (for each item) {left: number, center: number, right: number}
so now we know where every item is at all times

=========================
there is a global event listener (actually the Framer Motion onPan event) that
constantly sets the cursor position whenever the user drags on the screen

each item will detect if the current dragState.id === item.id
(am i the one being dragged right now?) -> update screen position of item
===========^^^^^^^^^^^^^ purely visual, no business logic

if the user clicks down on an item, save that item's id to dragState

> getTargetLocation()
take the cursor position and calculate which boundaries the cursor is currently
in. is only called when i'm actively dragging an item.
outputs: {
  epic: number, // number is the index of the epic
  feature: number,
  story: number
}

call getTargetLocation() whenever the user moves the mouse
if the target location changes, call moveEpic() or moveFeature(), etc.

storyMapState = [{id: "epic1"}, {id: "epic2"}]

|
moveEpic()
|
\/

storyMapState = [{id: "epic2"}, {id: "epic1"}]

save that to db

all other clients pick up the db changes and save it to their local react state

the changes show up on all other clients
