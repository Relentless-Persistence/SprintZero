rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  	match /AppInfo/info {
      allow get: if true;
    }

    match /Products/{productId} {
      allow read, update: if resource.data.members[request.auth.uid].type == "editor" || resource.data.members[request.auth.uid].type == "owner";
      allow create: if request.auth != null;
      allow delete: if resource.data.members[request.auth.uid].type == "owner";

      match /Insights/{insightId} {
        allow read, write: if isEditorOnProduct(productId);
      }

      match /Invites/{inviteId} {
      allow read: if request.auth.token.email == resource.data.email;
      allow write: if isEditorOnProduct(productId)
    }

      match /JourneyEvents/{journeyEventId} {
        allow read, write: if isEditorOnProduct(productId);
      }

      match /Journeys/{journeyId} {
        allow read, write: if isEditorOnProduct(productId);
      }

      match /Objectives/{objectiveId} {
        allow read, write: if isEditorOnProduct(productId);
      }

      match /Participants/{participantId} {
        allow read, write: if isEditorOnProduct(productId);
      }

      match /Personas/{personaId} {
        allow read, write: if isEditorOnProduct(productId);
      }

      match /Results/{resultId} {
        allow read, write: if isEditorOnProduct(productId);
      }

      match /RetrospectiveItems/{retrospectiveItemId} {
        allow read, write: if isEditorOnProduct(productId);
      }

      match /StoryMapComments/{storyMapCommentId} {
        allow read, write: if isEditorOnProduct(productId);
      }

      match /StoryMapHistories/{storyMapHistoryId} {
        allow read, write: if isEditorOnProduct(productId);

        match /HistoryItems/{historyItemId} {
          allow read, write: if isEditorOnProduct(productId);
        }
      }

      match /StoryMapItems/{storyMapItemId} {
        allow read, write: if isEditorOnProduct(productId);
      }

      match /Tasks/{taskId} {
        allow read, write: if isEditorOnProduct(productId);
      }

      match /Versions/{versionId} {
        allow read, write: if isEditorOnProduct(productId);
      }
    }

    match /Users/{userId} {
      allow get: if request.auth != null;
      allow create: if request.resource.data.email == request.auth.token.email;
      allow update, delete: if request.auth.uid == userId;
    }

    function isEditorOnProduct(productId) {
      let product = getAfter(/databases/$(database)/documents/Products/$(productId));
      return product.data.members[request.auth.uid].type == "editor" || product.data.members[request.auth.uid].type == "owner"
    }
  }
}
