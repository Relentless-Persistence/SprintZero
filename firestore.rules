rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  	match /AccessibilityItems/{id} {
    	allow read, update, delete:
      	if isEditorOnProduct(resource.data.productId)

      allow create:
      	if request.auth != null
    }

    match /Comments/{id} {
    	allow read, update, delete:
      	if resource.data.authorId == request.auth.uid

      allow create:
      	if request.auth != null
    }

    match /Objectives/{id} {
    	allow read, update, delete:
      	if isEditorOnProduct(resource.data.productId)

      allow create:
      	if request.auth != null
    }

    match /Products/{productId} {
      allow read, update, delete:
      	if resource.data.members[request.auth.uid].type == "editor"

      allow create:
      	if request.auth != null
    }

    match /StoryMapStates/{storyMapStateId} {
    	allow read, update, delete:
      	if isEditorOnProduct(resource.data.productId)

      allow create:
      	if request.auth != null

      match /Comments/{commentId} {
        allow read, create:
          if isEditorOnProduct(get(/databases/$(database)/documents/StoryMapStates/$(storyMapStateId)).data.productId)

        allow update, delete:
          if resource.data.authorId == request.auth.uid
      }

      match /Versions/{versionId} {
        allow read, write:
          if isEditorOnProduct(get(/databases/$(database)/documents/StoryMapStates/$(storyMapStateId)).data.productId)
      }
    }

    match /Users/{id} {
    	allow get, create:
      	if request.auth != null

      allow update, delete:
      	if id == request.auth.uid
    }

    function isEditorOnProduct(productId) {
      let product = get(/databases/$(database)/documents/Products/$(productId));
      return product.data.members[request.auth.uid].type == "editor"
    }
  }
}
